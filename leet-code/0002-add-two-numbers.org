#+title: Add Two Numbers

You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example 1:

#+begin_src
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
#+end_src

Example 2:

#+begin_src
Input: l1 = [0], l2 = [0]
Output: [0]
#+end_src

Example 3:

#+begin_src
Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
#+end_src

Constraints:

- The number of nodes in each linked list is in the range [1, 100].
- 0 <= Node.val <= 9
- It is guaranteed that the list represents a number that does not have leading zeros.

* Contents :toc:
- [[#c][C++]]

* C++

#+begin_src C++
ListNode* addTwoNumbers(ListNode* l1, ListNode* l2)
{
    ListNode* curr = new ListNode();
    ListNode* first = curr;

    ListNode* node_a = l1;
    ListNode* node_b = l2;

    int prevCarry = 0;

    while (node_a != nullptr || node_b != nullptr)
    {
        int sum = (node_a == nullptr ? 0 : node_a->val) +
                    (node_b == nullptr ? 0 : node_b->val) + prevCarry;

        int carry = 0;

        if (sum > 9)
        {
            sum %= 10;
            carry = 1;
        }

        curr->val = sum;

        if (node_a != nullptr)
            node_a = node_a->next;

        if (node_b != nullptr)
            node_b = node_b->next;

        if (node_a == nullptr && node_b == nullptr)
        {
            curr->next = nullptr;
            if (carry == 1)
                curr->next = new ListNode(carry);
        }
        else
        {
            curr->next = new ListNode();
            curr = curr->next;
        }

        prevCarry = carry;
    }

    return first;
}
#+end_src
